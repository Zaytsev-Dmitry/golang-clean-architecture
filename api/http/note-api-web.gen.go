// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// BackendErrorResponse defines model for BackendErrorResponse.
type BackendErrorResponse struct {
	Description *string   `json:"description,omitempty"`
	ErrorCode   *int      `json:"errorCode,omitempty"`
	Meta        *MetaData `json:"meta,omitempty"`
}

// BasicBackendResponse defines model for BasicBackendResponse.
type BasicBackendResponse struct {
	Description *string   `json:"description,omitempty"`
	ErrorCode   *string   `json:"errorCode,omitempty"`
	Meta        *MetaData `json:"meta,omitempty"`
}

// CreateNoteRequest defines model for CreateNoteRequest.
type CreateNoteRequest struct {
	Description *string `json:"description,omitempty"`
	Link        *string `json:"link,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// MetaData defines model for MetaData.
type MetaData struct {
	Path      *string `json:"path,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// NoteResponse defines model for NoteResponse.
type NoteResponse struct {
	Description *string `json:"description,omitempty"`
	Id          *uint   `json:"id,omitempty"`
	Link        *string `json:"link,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// SingleNoteBackendResponse defines model for SingleNoteBackendResponse.
type SingleNoteBackendResponse struct {
	Description *string       `json:"description,omitempty"`
	ErrorCode   *string       `json:"errorCode,omitempty"`
	Meta        *MetaData     `json:"meta,omitempty"`
	Payload     *NoteResponse `json:"payload,omitempty"`
}

// N400 defines model for 400.
type N400 = BackendErrorResponse

// N401 defines model for 401.
type N401 = BackendErrorResponse

// N404 defines model for 404.
type N404 = BackendErrorResponse

// N500 defines model for 500.
type N500 = BackendErrorResponse

// SaveNoteJSONRequestBody defines body for SaveNote for application/json ContentType.
type SaveNoteJSONRequestBody = CreateNoteRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /note)
	SaveNote(c *gin.Context)

	// (GET /note/{id})
	GetNotesById(c *gin.Context, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SaveNote operation middleware
func (siw *ServerInterfaceWrapper) SaveNote(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SaveNote(c)
}

// GetNotesById operation middleware
func (siw *ServerInterfaceWrapper) GetNotesById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNotesById(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/note", wrapper.SaveNote)
	router.GET(options.BaseURL+"/note/:id", wrapper.GetNotesById)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWzW7TQBB+FWvg6MYOBFT51rQFIkSC+nOhqtBiT5Jt7V2zO6mIIkv8iBsSEm/AG/TW",
	"Con2Few3Qrs2TUJcwk9ULpzi7Iy//WbmmxlPIJRJKgUK0hBMQKFOpdBo/7R83/yEUhAKMo8sTWMeMuJS",
	"eEdaCnOmwyEmzDzdVtiHAG55U0yvtGqvzcJjFNG2UlLtVJdAlmUuRKhDxVODCQG0WeQofDlCTZC50PKb",
	"N05hv7uxv/eot9N5tr1VcmjdOIdub+/5g95+1xK49w/q0BGESrDY2UV1gsqxL4Dxq5DMRbVgwQRSJVNU",
	"xEsZzQFPgMYpQgCaFBcDEx6a1zdlhDNWLggHqIw5QVoa1RMktsWIWYIVhHxxhKEVUZtpHlZcV0tzav17",
	"lpsKGWFXEu5U+v9tijEXx7UGwZI62nU0rkgu3J4yGtaiE09QE0vSX7yijPFP68Ajc9yXKmFUKuV+C9wf",
	"hePCq7WBXKtOR1zQqhK0y8UgtnWqkRSL414fgoNlTVgjyMxdTPg4lixaJqu5dNZQPrTtzUVf2gg5xcZq",
	"3nJm5oiz8bQDLpyg0uUEaDb8hm8ClikKlnII4G7DbzTBtUqwDD0hqSyhLPU6P0Tyz/lF8b54nZ/mX/Pz",
	"4m3xwcnP8tP8Mj8v3uRfindg0ZUl0IkggF12YlMLLlRboC2j8cqm32KPZTY5c2vvzgrH7fViqZm5vcfl",
	"uvGvQ72i6Rmn6Xpc5tucWWPLfFszG+fnvsbJyo0NNAQHVlFwaE6sLLwJjzKDMsA6aXzKz4qPNZJw8sv8",
	"wuHRgjQeIpkbdHvciawGFUuQUGnbbtyA2gn1vZnBYhgVcYURBKRG6M6UbdkEybLD/8JYqTDMx4P9mihL",
	"Nh9jLEMWgwsjFUMAQ6I08Dx7OJSagnV/3Tej7FsAAAD///7I5fGxCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
